
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="chrome=1">
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no, width=device-width">
    <style type="text/css">
        html, body, .map {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        }
    </style>
    <link rel="stylesheet" href="http://openlayers.org/en/v3.15.1/css/ol.css" type="text/css">
    <script src="http://openlayers.org/en/v3.15.1/build/ol.js"></script>
    <script src="https://code.jquery.com/jquery-1.11.2.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>


    <title>Bus Delay Map</title>
</head>
<body>
<div class="container-fluid">
    <div class="row">
        <form action="/" class="form-inline">
            <label>Time</label>
            <select id="timestamp" name="timestamp" class="form-control" onchange="this.form.submit()">
                <option selected value="latest">latest</option>
                    <tal:block tal:repeat="timestamp sorted(timestamps.timestamps)">
                        <option tal:attributes="value timestamp" tal:condition="timestamp == selected_timestamp"
                                selected>
                            ${timestamps.timestamps[timestamp]}
                        </option>
                        <option tal:attributes="value timestamp" tal:condition="timestamp != selected_timestamp">
                            ${timestamps.timestamps[timestamp]}
                        </option>
                    </tal:block>
            </select>


            <label>Line</label>
            <select id="line" name="line" class="form-control" onchange="this.form.submit()">
                    <option selected value="all">-ALL-</option>
                <tal:block tal:repeat="line lines.lines">
                    <option tal:content="line" tal:condition="line == selected_line" selected></option>
                    <option tal:content="line" tal:condition="line != selected_line"></option>
                </tal:block>
            </select>
            <!-- <input type="submit" value="submit" method="GET"></input> -->
            </form>

        </div>
    <div class="row">
        <div id="map" class="col-md-8"></div>
        <div id="popup" class="col-md-4" style="background-color:#eee"></div>
        </div>
</div>
</body>
    <script type="text/javascript">
    var projection = ol.proj.get('EPSG:3857');
    var projectionExtent = [300000, 6000000, 1000000, 6700000];
    var s = new ol.source.Vector({
            projection: 'EPSG:3857',
            url: '/data?timestamp=${selected_timestamp}&line=${selected_line}&grouped=True',
            format: new ol.format.GeoJSON()
        });
    var vectorLayer = new ol.layer.Vector({
        title: 'added Layer',
        source: s,
        style: new ol.style.Style({
            image: new ol.style.Circle({
                radius: 2,
                fill: new ol.style.Fill({
                    color: "#fff"
                }),
                stroke: new ol.style.Stroke({
                    color: "#f00",
                    width: 2
                })
            }),
            zIndex: Infinity
        })
    });
    var heatmapLayer = new ol.layer.Heatmap({
        title: 'added Layer',
        opacity: 0.3,
        radius: 30,
        source: s
    });

    var map = new ol.Map({
        target: 'map',
        loadTilesWhileAnimating: true,
        loadTilesWhileInteracting: true,
        layers: [
            new ol.layer.Tile({
                title: 'basemap ',
                //opacity: 0.7,
                extent: projectionExtent,
                visible: true,
                source: new ol.source.WMTS({
                    url: 'http://wmts1.geoportail.lu/opendata/wmts/{Layer}/{TileMatrixSet}/{TileMatrix}/{TileCol}/{TileRow}.png',
                    layer: 'basemap',
                    matrixSet: 'GLOBAL_WEBMERCATOR_4_V3',
                    requestEncoding: /** @type {ol.source.WMTSRequestEncoding} */ ('REST'),
                    format: 'image/png',
                    projection: projection,
                    tileGrid: new ol.tilegrid.WMTS({
                        origin: [-20037508.3428, 20037508.3428],
                        resolutions: [156543.033928, 78271.516964, 39135.758482, 19567.879241, 9783.9396205,
                            4891.96981025, 2445.98490513, 1222.99245256, 611.496226281, 305.748113141, 152.87405657,
                            76.4370282852, 38.2185141426, 19.1092570713, 9.55462853565, 4.77731426782, 2.38865713391,
                            1.19432856696, 0.597164283478, 0.298582141739
                        ],
                        matrixIds: [
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19
                        ]
                    }),
                    style: 'default'

                })
            }),
            vectorLayer,
            heatmapLayer
        ],
        view: new ol.View({
            center: ol.proj.transform([6.12865, 49.61177], 'EPSG:4326', 'EPSG:3857'),
            zoom: 13
        })
    });


    var highlightStyleCache = {};

    var mystyle = new ol.style.Style({
        text: new ol.style.Text({
            text: 'Hello',
            textAlign: 'left',
            offsetX: 4,
            scale: 1.3,
            fill: new ol.style.Fill({
                color: '#000000'
            }),
            stroke: new ol.style.Stroke({
                color: '#FFFF99',
                width: 3.5
            })
        }),
        image: new ol.style.Circle({
            radius: 2,
            fill: new ol.style.Fill({
                color: "#fff"
            }),
            stroke: new ol.style.Stroke({
                color: "#ff0",
                width: 4
            })
        }),
        zIndex: Infinity
    });



    var featureOverlay = new ol.layer.Vector({
        source: new ol.source.Vector(),
        map: map,
        style: mystyle
    });

    var highlight;
    var displayFeatureInfo = function(pixel) {

        var feature = map.forEachFeatureAtPixel(pixel, function(feature, vectorLayer) {
            return feature;
        });

        var info = document.getElementById('popup');
        if (feature) {
            var text = "<h4>" + feature.get('name') + "</h4>";
            text += "<h5>Mean delay: " + Math.round(feature.get('mean_delay'), 2).toString() + "m</h5>";
            text += "<table style='vertical-align:top' class='table-bordered table-striped'>";
            text += "<tr><th>Line</th><th>Destination</th><th>Delay</th><th>Departure</th>";
            text += feature.get('formatted_delay_info');
            text += "</table>";
            info.innerHTML = text;
        } else {
            info.innerHTML = '&nbsp;';
        }


        if (feature !== highlight) {
            if (highlight) {
                featureOverlay.getSource().removeFeature(highlight);
            }
            if (feature) {
                var text2 = "";
                text2 += Math.round(feature.get('mean_delay'), 2).toString() + "m";

                mystyle.getText().setText(text2);
                featureOverlay.getSource().addFeature(feature);
            }
            highlight = feature;
        }

    };

    map.on('pointermove', function(evt) {
        if (evt.dragging) {
            return;
        }
        var pixel = map.getEventPixel(evt.originalEvent);
        displayFeatureInfo(pixel);
    });


    map.on('click', function(evt) {
        displayFeatureInfo(evt.pixel);
    });


    </script>

</html>

